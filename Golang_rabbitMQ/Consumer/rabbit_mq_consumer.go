package main

import (
	"log"
	"encoding/json"
    "database/sql"
    "fmt"
    "github.com/lib/pq"
	"github.com/streadway/amqp"
)
const (
    host = "localhost"
    port = 5432
    user = "postgres"
    password = "password"
    dbname = "golang_pub_sub"
)
type AutoGenerated struct {
	Offers []struct {
		CmOfferID string `json:"cm_offer_id"`
		Hotel     struct {
			HotelID     string   `json:"hotel_id"`
			Name        string   `json:"name"`
			Country     string   `json:"country"`
			Address     string   `json:"address"`
			Latitude    float64  `json:"latitude"`
			Longitude   float64  `json:"longitude"`
			Telephone   string   `json:"telephone"`
			Amenities   []string `json:"amenities"`
			Description string   `json:"description"`
			RoomCount   int      `json:"room_count"`
			Currency    string   `json:"currency"`
		} `json:"hotel"`
		Room struct {
			HotelID     string `json:"hotel_id"`
			RoomID      string `json:"room_id"`
			Description string `json:"description"`
			Name        string `json:"name"`
			Capacity    struct {
				MaxAdults     int `json:"max_adults"`
				ExtraChildren int `json:"extra_children"`
			} `json:"capacity"`
		} `json:"room"`
		RatePlan struct {
			HotelID            string `json:"hotel_id"`
			RatePlanID         string `json:"rate_plan_id"`
			CancellationPolicy []struct {
				Type              string `json:"type"`
				ExpiresDaysBefore int    `json:"expires_days_before"`
			} `json:"cancellation_policy"`
			Name            string   `json:"name"`
			OtherConditions []string `json:"other_conditions"`
			MealPlan        string   `json:"meal_plan"`
		} `json:"rate_plan"`
		OriginalData struct {
			GuaranteePolicy struct {
				Required bool `json:"Required"`
			} `json:"GuaranteePolicy"`
		} `json:"original_data"`
		Capacity struct {
			MaxAdults     int `json:"max_adults"`
			ExtraChildren int `json:"extra_children"`
		} `json:"capacity"`
		Number   int    `json:"number"`
		Price    int    `json:"price"`
		Currency string `json:"currency"`
		CheckIn  string `json:"check_in"`
		CheckOut string `json:"check_out"`
		Fees     []struct {
			Type        string  `json:"type"`
			Description string  `json:"description"`
			Included    bool    `json:"included"`
			Percent     float64 `json:"percent"`
		} `json:"fees"`
	} `json:"offers"`
}

func failOnError(err error, msg string) {
	if err != nil {
		log.Fatalf("%s: %s", msg, err)
	}
}

func main() {
	conn, err := amqp.Dial("amqp://guest:guest@localhost:5672/")
	failOnError(err, "Failed to connect to RabbitMQ")
	defer conn.Close()

	ch, err := conn.Channel()
	failOnError(err, "Failed to open a channel")
	defer ch.Close()

	q, err := ch.QueueDeclare(
		"test", // name
		true,   // durable
		false,   // delete when unused
		false,   // exclusive
		false,   // no-wait
		nil,     // arguments
	)
	failOnError(err, "Failed to declare a queue")

	msgs, err := ch.Consume(
		q.Name, // queue
		"",     // consumer
		true,   // auto-ack
		false,  // exclusive
		false,  // no-local
		false,  // no-wait
		nil,    // args
	)
	failOnError(err, "Failed to register a consumer")

	forever := make(chan bool)

	go func() {
		for d := range msgs {
			log.Printf("Received a message: %s", d.Body)
			var birds AutoGenerated
			json.Unmarshal([]byte(d.Body), &birds)


			connStr := fmt.Sprintf("host=%s port=%d user=%s "+
			"password=%s dbname=%s sslmode=disable",
			host, port, user, password, dbname)
			db, err := sql.Open("postgres", connStr)
			if err != nil {
				panic(err)
			}
			defer db.Close()

			// storing the Hotel values


			sqlStatement := `INSERT INTO Hotel(hotelhotel_id,hotelname,hotelcountry,hoteladdress,hotellatitude,hotellongitude,hoteltelephone,hotelamenities,hoteldescription,hotelroom_count,hotelcurrency)
			VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)`
			_, err = db.Exec(sqlStatement, birds.Offers[0].Hotel.HotelID,
				birds.Offers[0].Hotel.Name,      
				birds.Offers[0].Hotel.Country,     
				birds.Offers[0].Hotel.Address,    
				birds.Offers[0].Hotel.Latitude,    
				birds.Offers[0].Hotel.Longitude,   
				birds.Offers[0].Hotel.Telephone,  
				pq.Array(birds.Offers[0].Hotel.Amenities),   
				birds.Offers[0].Hotel.Description, 
				birds.Offers[0].Hotel.RoomCount,   
				birds.Offers[0].Hotel.Currency)
			if err != nil {
				panic(err)
			} else {
				fmt.Println("\nRow inserted successfully!")
			}

			//storing the room value
			
			roomStatement := `Insert into Room(roomhotel_id, room_id, roomdescription, roomname, capacity) Values($1, $2, $3, $4, $5)`
			data := &birds.Offers[0].Room.Capacity
			b, err := json.Marshal(data)

			if err != nil {
				panic(err)
			}


			_, err = db.Exec(roomStatement, birds.Offers[0].Room.HotelID, birds.Offers[0].Room.RoomID,birds.Offers[0].Room.Description,birds.Offers[0].Room.Name,string(b))


			if err != nil {
				panic(err)
			} else {
				fmt.Println("\nRow inserted successfully!")
			}



			//storing the Rate Plan Value
			data_rate :=  &birds.Offers[0].RatePlan.CancellationPolicy
			d, err := json.Marshal(data_rate)

			
			if err != nil {
				panic(err)
			}

			

			ratePlanStatement := `insert into rateplan(rate_planhotel_id, rate_planrate_plan_id, rate_plan_cancellation_policy, rate_planname, rate_plan_otherconditions, rate_planmeal_plan) values ($1, $2, $3, $4, $5, $6)`

			_, err = db.Exec(ratePlanStatement, birds.Offers[0].RatePlan.HotelID, birds.Offers[0].RatePlan.RatePlanID, string(d), birds.Offers[0].RatePlan.Name, pq.Array(birds.Offers[0].RatePlan.OtherConditions), birds.Offers[0].RatePlan.MealPlan)


			if err != nil {
				panic(err)
			} else {
				fmt.Println("\nRow inserted successfully!")
			}   

		}
	}()

	log.Printf(" [*] Waiting for messages. To exit press CTRL+C")
	<-forever
}